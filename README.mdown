# About

This repository was originally for my 'svnstash' tool. Over time, however, I started adding other tools into the same repository to reuse some of the code, so now I think of these as 'svntools'.

## svnstash

Stash the changes in an svn working copy away for later - based on git's stash command. Limited to text files only, as it's using `svn diff` internally.

## svneligible

This tool aims to ease the pain caused by Subversion's braindead merge command syntax. It now sports a whole suite of useful tools for making branching and merging slightly more tolerable in Subversion. Using svneligible, you can create a branch and have it automatically set up to easily check if there are revisions eligible to merge from the parent branch. You can merge in those eligible revisions, optionally filtering out certain revisions that you don't want/need, then automatically reintegrate that branch back to its parent branch later. There are also commands to easily list common branch locations.

The filtering does *not* mark revisions as merged using the "record-only merge" feature of Subversion, instead it is designed primarily to allow you to merge in your own work while omitting colleagues. We tend to "own" our own work, so if a hotfix revision hasn't been merged back into trunk it's down to the author to merge (and resolve conflicts).

One of the primary differences of svneligible is that Subversion interprets -r4:10 to mean "merge changes that occurred *after* revision 4, and up to (and including) revision 10", whereas all ranges in svneligible are inclusive. This means that passing '--range=4:10' means "merge changes that happened in revision 4 up to and including 10".

Also of note is the fact that all branching/merging/switching operations occur on the working copy's root, effectively avoiding any problems caused by accidentally operating on subtrees.

### Setting up a branch.

<pre style="background: black; color: lightgreen">
	➜  projectname svn:(trunk) svneligible branch ^/branches/drarok/feature
	<span style="color: silver;">[editor opens for the commit message]</span>
	Setting upstream to ^/trunk for path ^/branches/drarok/feature
	Switching working copy to ^/branches/drarok/feature
</pre>

### Updating your branch when the 'upstream' branch has changes.

<pre style="background: black; color: lightgreen">
	➜  projectname svn:(branches/drarok/feature) svneligible show <span style="color: silver;"># Show eligible revisions from the upstream branch.</span>
	^/trunk
	    r4
	        colleague | 2012-05-14 09:28:05 +0100
	        Changes to 'xyz' feature merged to trunk.
	➜  projectname svn:(branches/drarok/feature) svneligible merge
	^/trunk
	➜  projectname svn:(branches/drarok/feature) ✘ svn ci -m 'Merging trunk changes to my branch to keep it updated.'
	Committed revision 5.
</pre>

### Performing a 'reintegrate' merge when finished with your branch.

<pre style="background: black; color: lightgreen">
	➜  projectname svn:(branches/drarok/feature) svneligible reintegrate
	Reintegrating into ^/trunk
	Committing...
	<span style="color: silver;">[editor opens for the commit message]</span>
	Automatically removing the reintegrated branch.
	Removing upstream for path ^/branches/drarok/feature (was ^/trunk)
	➜  projectname svn:(trunk)
</pre>

Note that the working copy is automatically switched to the upstream branch. Check the help for further explanation of the options. For example, you can pass --no-commit, and the process will stop after the merge. The branch will *not* be removed if the commit doesn't occur.

Please be aware that sometimes this tool assumes you have roughly the same repository layout as me:

<pre>
branches/username/feature1
branches/username/feature2
releases/release-0.1.1
releases/release-0.1.2
releases/release-0.2.0
tags/release-0.1.1
tags/release-0.1.2
</pre>

# Requirements

These tools were developed on Mac OS X, and aims to only require built-in tools. It should run fine on Linux, too. Windows users may need to install some additional tools.

* Subversion
* PHP5
* diff / patch binaries on your PATH.

# Known Issues

Binary files are *not* supported nor detected at present by svnstash. If you attempt to stash changes to a binary file, or stash an untracked binary, you *will* lose its contents.

# Usage

Personally, I just create symlinks named `svnstash` and `svneligible` somewhere on my path, pointed to the relevant php files. Assuming you got the code from Github, the main scripts should be marked as executable.

Running `svnstash --help` or `svneligible --help` will give much more detailed information about the available commants.

# Contributing

If you feel you could add something to these tools, please do. Patches welcome! Fork on Github and send me a pull request (preferably on the develop branch).

# Q&A about svnstash

## Why not just use git-svn?

Because it doesn't support Subversion's mergeinfo, which is vital at work for tracking branches, releases, hotfixes, etc.

## Why doesn't it support &lt;x&gt;?

Unless &lt;x&gt; is "binary files", then it's probably because I've not thought of it. Why not file an issue on the Github tracker?

If it's binary file support you're after, I'm afraid that's not a high priority for me. Binary files aren't handled very well by Subversion anyway, so I'm at a bit of a loss for a good way to handle them. If you have any bright ideas, please drop me a line.

## Who made this?

I'm Mat "Drarok" Gadd. You can find me on [Twitter][twitter], here on [Github][github], [Bitbucket][bitbucket], [StackOverflow][stackoverflow], and probably elsewhere I've not thought of. Drop by and say hi if you find any of my stuff useful.

[twitter]: http://twitter.com/Drarok
[github]: http://github.com/Drarok
[bitbucket]: http://bitbucket.org/drarok
[stackoverflow]: http://stackoverflow.com/users/86093/drarok